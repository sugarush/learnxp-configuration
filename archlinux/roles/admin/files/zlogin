# display a sorted list of consul nodes
alias members="consul members --rpc-addr $HOSTNAME:8400 | grep -v Node | sort -h"

# run docker commands agains swarm managers
alias swarm="docker -H tcp://swarm-manager.service.consul:4000"

# run an ansible module across the current deployment
ansible-exec() {
  ansible -i /root/ansible/inventory.py "tag_${1}_${2}_${ENVIRONMENT}" -m "${3}" -a "${4}"
}

# run commands on remote nodes
ansible-cmd() {
  ansible-exec "${1}" "${2}" "command" "${3}"
}

# run a shell script on a remote node
ansible-shell() {
  ansible-exec "${1}" "${2}" "shell" "${3}"
}

# run a command on the first remote node in ansible-exec results
ansible-ssh() {
  IP_ADDR=$(grep -oE "^([0-9]{1,3}\.){3}[0-9]{1,3}" | sed -n "1p")
  ssh ${IP_ADDR} "${1}"
}

# ping a set of nodes
ansible-ping() {
  ansible-exec "Cluster" "${1}" "ping"
}

# the command to restart the ansible configure systemd service
RESTART_CONFIGURE_COMMAND="systemctl restart configure"

# restart the configure systemd service on a subset of nodes
ansible-configure() {
  ansible-cmd "Cluster" "${1}" "${RESTART_CONFIGURE_COMMAND}"
}

# restart the configure systemd service on all nodes
ansible-configure-all() {
  ansible-cmd "Environment" "${ENVIRONMENT}" "${RESTART_CONFIGURE_COMMAND}"
}

# tail the journal of a service on a remote node using ansible-cmd results
ansible-tail() {
  ansible-ssh "journalctl -fu ${1}"
}

# restart configure on a subset of nodes and tail the configure service journal
ansible-configure-tail() {
  ansible-configure "${1}" | ansible-tail "configure"
}
