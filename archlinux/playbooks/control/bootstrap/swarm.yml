---

  - hosts: tag_Cluster_{{ lookup('env', 'ENVIRONMENT') }}_control

    vars:

      consul_kv: http://consul.service.consul:8500/v1/kv

      manager_token_path: "{{ consul_kv }}/docker/swarm/token/manager"
      worker_token_path: "{{ consul_kv }}/docker/swarm/token/worker"
      swarm_leader_path: "{{ consul_kv }}/docker/swarm/leader"

      swarm_port: 2377

    tasks:

      - name: destroy the cluster
        command: docker swarm leave --force
        ignore_errors: yes

      - name: initialize the cluster
        command: docker swarm init
        run_once: yes

      - name: get manager token
        command: docker swarm join-token manager --quiet
        register: manager_token
        run_once: yes

      - name: get worker token
        command: docker swarm join-token worker --quiet
        register: worker_token
        run_once: yes

      - name: add manager token to consul
        uri:
          url: "{{ manager_token_path }}"
          body: "{{ manager_token.stdout }}"
          method: PUT
        run_once: yes

      - name: add worker token to consul
        uri:
          url: "{{ worker_token_path }}"
          body: "{{ worker_token.stdout }}"
          method: PUT
        run_once: yes

      - name: add the swarm leader's ip to consul
        uri:
          url: "{{ swarm_leader_path }}"
          body: "{{ ansible_host }}:{{ swarm_port }}"
          method: PUT
        run_once: yes

      - name: register swarm leader's ip and port
        debug:
          msg: "{{ ansible_host }}:{{ swarm_port }}"
        register: test_var

      - name: print test_var
        debug:
          msg: "{{ test_var }}"

      #- name: get the swarm leader ip and port
      #  uri:
      #    url: "{{ swarm_leader_path }}"
      #    method: GET
      #  run_once: yes
      #  register: swarm_leader

      #- name: add managers to the cluster
      #  command: docker swarm join --token {{ manager_token.stdout }} {{ #swarm_leader.json[0].Value|b64decode }}
      #  ignore_errors: yes

      #- name: get manager node ids
      #  command: docker node ls --quiet
      #  run_once: yes
      #  register: manager_ids

      #- name: drain manager nodes
      #  command: docker node update --availability drain {{ item }}
      #  run_once: yes
      #  with_items: "{{ manager_ids }}"

      #- name: remove the swarm leader's ip from consul
      #  uri:
      #    url: "{{ swarm_leader_path }}"
      #    method: DELETE
      #  run_once: yes
